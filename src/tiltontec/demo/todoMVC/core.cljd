(ns tiltontec.demo.todoMVC.core
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:shared_preferences/shared_preferences.dart" :as prefs]
    [tiltontec.util.base :refer [dprn dp dpx]]
    [tiltontec.matrix.api :refer [mget mswap! fasc cF cF+ cI]]
    [tiltontec.flutter-mx.core :refer [in-my-context as-dart-callback] :as fx]
    [tiltontec.demo.todoMVC.common :as cmm]
    [tiltontec.demo.todoMVC.todo :as todo]
    [tiltontec.demo.todoMVC.input :as input]
    [tiltontec.demo.todoMVC.items :as items]
    [tiltontec.demo.todoMVC.footer :as footer]
    [tiltontec.demo.todoMVC.persist :as stg]))

;;; --- Components first ------------------------------------------

;;; --- the app bar -----------------------------------------------
(defn todo-app-bar [title]
  (fx/preferred-size
    {:preferredSize (.fromHeight m/Size 72)}
    (fx/app-bar {:backgroundColor (.fromRGBO m/Color 245 245 245 1)
                 :title           (fx/column
                                    {:crossAxisAlignment m.CrossAxisAlignment/end}
                                    (fx/text
                                      {:style (p/TextStyle
                                                .fontFamily "Helvetica Neue"
                                                .color (cmm/title-red)
                                                .fontWeight m.FontWeight/w100
                                                .fontSize 64.0)}
                                      title))})))

;;; --- footer filters -------------------------------------------------
(defn todos-dashboard []
  (fx/row
    {:mainAxisAlignment m.MainAxisAlignment/center}
    (fx/expanded {:flex 1} (footer/items-remaining-display))
    (fx/expanded {:flex 2} (footer/completion-filters))
    (fx/expanded {:flex 1} (footer/clear-completed-button))))

;;; --- credits --------------------------------------------------------
(defn about-credits []
  (let [faint (p/TextStyle
                ;; todo does flutter let us place the style higher so referenced just once?
                .color m.Colors/grey
                .fontSize 14.0)
        credits ["Double-click a todo to edit."
                 "Make title blank to delete. Or click the big red X."
                 "Red indicates meaningless hits on FDA.gov."
                 "by Kenny Tilton"
                 "Flutter \u2022 Matrix \u2022 ClojureDart"]]
    (fx/padding
      {:padding (m.EdgeInsets/all 16.0)}
      {:name          :credits-toggle
       :show-credits? (cI false)}
      (fx/column
        (when (mget (fasc :credits-toggle) :show-credits?)
          (fx/column
            (mapv #(fx/text {:style faint} %) credits)))
        (fx/icon-button
          {:onPressed (as-dart-callback []
                        (mswap! (fasc :credits-toggle) :show-credits? not))
           :icon      (cF (in-my-context [me ctx]
                            (m/Icon (if (mget (fasc :credits-toggle) :show-credits?)
                                      m.Icons/info_outline m.Icons/info)
                              .color m.Colors/grey)))})))))

(def app-theme (m/ThemeData
                 .fontFamily "Helvetica Neue"
                 .backgroundColor (.fromRGBO m/Color 245 245 245 1)))

;;;;;; --- the app --------------------------------------------------------

(defn make-app []
  (let [title "todo"]
    (fx/material-app
      {:title                      title
       :theme                      app-theme
       :debugShowCheckedModeBanner true}
      {:name      :app
       :db        (cF+ [:async? true
                        ; ^^^ the formula computes a value of nil then awaits the future
                        ; and, when received, reactively "computes" the received value as
                        ; a new matrix input.
                        :optimize false
                        ;; ^^^ this rule serves as a constructor, so has no dependencies, but
                        ; if we allow optimization to proceed normally it will think it can trash this cell
                        ; but async? cells get a lot more handling, including reactive handling
                        :watch (fn [_ me new-db _ _]
                                 ;; the reactive :db cell is handy for timing during lifecycle initialization, but
                                 ;; more convenient as a global resource, so we echo the new-db to a global
                                 (stg/DB! new-db))]
                    ;; we make the DB component of the app a reactive property since we receive it as a future
                    (.getInstance prefs/SharedPreferences))

       :todo-list (cF (when-let [db (mget me :db)]
                        ;; ^^^ we cannot use global DB, which is not reactive. It is just a handy global cache.
                        ;; But we cannot do our work until the db is established, so our rule reads
                        ;; the reactive :db cell.
                        ;;
                        ;; Next,we make sure cell :db makes it into cache DB, since that
                        ;; is where all the code looks. Just a sanity check. This fires during some hot reloads,
                        (assert (stg/DB) (str "DB not populated but cell :db is: " db))
                        ;; Now we can load any existing todos from storage...
                        (todo/make-ToDoList "todo"
                          (stg/collection-docs "todo"))))}
      (fx/scaffold
        {:appBar                  (todo-app-bar title)
         :persistentFooterButtons [(todos-dashboard)]}
        (fx/ink {:color m.Colors/white}
          (fx/column
            (input/todo-controls)
            (items/todo-items)
            (about-credits)))))))
