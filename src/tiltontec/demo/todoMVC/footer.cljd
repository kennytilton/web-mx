(ns tiltontec.demo.todoMVC.footer
  (:require
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]

    [tiltontec.matrix.api :refer [mget mset! mswap! mkids cI cF]]
    [tiltontec.flutter-mx.core :refer [as-dart-callback my-app] :as fx]

    [tiltontec.demo.todoMVC.common :as cmm
     :refer [ my-todo-list ]]
    [tiltontec.demo.todoMVC.todo :refer [td-completed] :as todo]))

(defn items-remaining-display []
  (fx/text
    (if-let [td-lst (my-todo-list)]
      (let [remaining (remove td-completed (mkids td-lst))]
        (str (count remaining)
          " item"
          ;; the spec is clear about the smart "s" detail
          (when (not= 1 (count remaining)) "s")))
      ;;; text widget won't take nil, so...
      "")))

(defn completion-filters []
  (fx/row
    {;; map one is for Flutter widget properties, using Flutter camelCase keywords
     :mainAxisAlignment m.MainAxisAlignment/spaceEvenly}
    {;; map two is for application semantics
     ;; naming MX objects lets search the application "database" symbolically
     :name      :completions
     ;; the prototype nature of MX lets us define state as needed by any app widget.
     ;; Here we see that widget named ":completions", property ":selection", will be the
     ;; app source of truth for that user option.
     :selection (cI :all)}
    ;; further expressions yield children for the Flutter row. FlutterMX provides the ":children" property.
    (let [selector me
          ;; ^^^ just binding "me" more readably, and to have it handy in nested rules
          ;; where "me" is no longer this :completions object, so they do not have to navigate to it.
          ;; This trick rarely gets used.
          choice (fn [completion-enum label]
                   (fx/ink-well
                     {:onTap (as-dart-callback []
                               (mset! selector
                                 ;; ^^^ lexical scope is a big Lisp win
                                 :selection completion-enum))}
                     (fx/container
                       {:decoration (cF                     ;; we can compute "Flutter" properties as well as app semantic properties
                                      (when (mget me :selected?)
                                        ;; next we see that a "native" Flutter object can be mingled with FMX objects
                                        (m/BoxDecoration
                                          .border (.all m/Border .color (cmm/title-red) .width 0.5)
                                          .borderRadius (m.BorderRadius/all (m.Radius/circular 4.0)))))}
                       {:selected? (cF ;; for a bit of readability, we reify an ad hoc "selected?" property
                                     ;; so it can be used directly by the decoration rule ^^^.
                                     (= completion-enum
                                       (mget selector :selection)))}
                       (fx/padding
                         {:padding (m.EdgeInsets/all 3.0)}
                         ;; note again that a native Flutter m/Text can be mingled with FMX, here
                         ;; an m/Text will become the :child of an FMX padding widget.
                         (m/Text label)))))]
      [(choice :all "All")
       (choice :active "Active")
       (choice :done "Done")])))

(defn clear-completed-button []
  (fx/visibility!
    {:visible           (cF (if-let [tds (todo/app-todos (my-app))]
                              (boolean                      ;; FL wants explicit boolean
                                (some td-completed tds))
                              ;; nb might still be loading initially
                              false))
     :maintainSize      true
     :maintainAnimation true
     :maintainState     true}
    (fx/text-button
      {:onPressed (as-dart-callback []
                    (mswap! (my-todo-list) :kids
                      (partial remove td-completed)))}
      (fx/text "Clear done"))))